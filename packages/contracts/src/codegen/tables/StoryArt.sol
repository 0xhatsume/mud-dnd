// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("StoryArt")));
bytes32 constant StoryArtTableId = _tableId;

struct StoryArtData {
  string context;
  string nft_url;
  string image_url;
}

library StoryArt {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.STRING;
    _schema[1] = SchemaType.STRING;
    _schema[2] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.BYTES32;
    _schema[1] = SchemaType.INT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "context";
    _fieldNames[1] = "nft_url";
    _fieldNames[2] = "image_url";
    return ("StoryArt", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get context */
  function getContext(bytes32 world, int256 order) internal view returns (string memory context) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Get context (using the specified store) */
  function getContext(IStore _store, bytes32 world, int256 order) internal view returns (string memory context) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /** Set context */
  function setContext(bytes32 world, int256 order, string memory context) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.setField(_tableId, _keyTuple, 0, bytes((context)));
  }

  /** Set context (using the specified store) */
  function setContext(IStore _store, bytes32 world, int256 order, string memory context) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.setField(_tableId, _keyTuple, 0, bytes((context)));
  }

  /** Get the length of context */
  function lengthContext(bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of context (using the specified store) */
  function lengthContext(IStore _store, bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 0, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of context (unchecked, returns invalid data if index overflows) */
  function getItemContext(bytes32 world, int256 order, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of context (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemContext(
    IStore _store,
    bytes32 world,
    int256 order,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 0, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to context */
  function pushContext(bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Push a slice to context (using the specified store) */
  function pushContext(IStore _store, bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.pushToField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /** Pop a slice from context */
  function popContext(bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 0, 1);
  }

  /** Pop a slice from context (using the specified store) */
  function popContext(IStore _store, bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.popFromField(_tableId, _keyTuple, 0, 1);
  }

  /** Update a slice of context at `_index` */
  function updateContext(bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 0, _index * 1, bytes((_slice)));
  }

  /** Update a slice of context (using the specified store) at `_index` */
  function updateContext(IStore _store, bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.updateInField(_tableId, _keyTuple, 0, _index * 1, bytes((_slice)));
  }

  /** Get nft_url */
  function getNft_url(bytes32 world, int256 order) internal view returns (string memory nft_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Get nft_url (using the specified store) */
  function getNft_url(IStore _store, bytes32 world, int256 order) internal view returns (string memory nft_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Set nft_url */
  function setNft_url(bytes32 world, int256 order, string memory nft_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((nft_url)));
  }

  /** Set nft_url (using the specified store) */
  function setNft_url(IStore _store, bytes32 world, int256 order, string memory nft_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.setField(_tableId, _keyTuple, 1, bytes((nft_url)));
  }

  /** Get the length of nft_url */
  function lengthNft_url(bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of nft_url (using the specified store) */
  function lengthNft_url(IStore _store, bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of nft_url (unchecked, returns invalid data if index overflows) */
  function getItemNft_url(bytes32 world, int256 order, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of nft_url (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemNft_url(
    IStore _store,
    bytes32 world,
    int256 order,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to nft_url */
  function pushNft_url(bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to nft_url (using the specified store) */
  function pushNft_url(IStore _store, bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from nft_url */
  function popNft_url(bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from nft_url (using the specified store) */
  function popNft_url(IStore _store, bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update a slice of nft_url at `_index` */
  function updateNft_url(bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Update a slice of nft_url (using the specified store) at `_index` */
  function updateNft_url(IStore _store, bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Get image_url */
  function getImage_url(bytes32 world, int256 order) internal view returns (string memory image_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Get image_url (using the specified store) */
  function getImage_url(IStore _store, bytes32 world, int256 order) internal view returns (string memory image_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Set image_url */
  function setImage_url(bytes32 world, int256 order, string memory image_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((image_url)));
  }

  /** Set image_url (using the specified store) */
  function setImage_url(IStore _store, bytes32 world, int256 order, string memory image_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.setField(_tableId, _keyTuple, 2, bytes((image_url)));
  }

  /** Get the length of image_url */
  function lengthImage_url(bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of image_url (using the specified store) */
  function lengthImage_url(IStore _store, bytes32 world, int256 order) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of image_url (unchecked, returns invalid data if index overflows) */
  function getItemImage_url(bytes32 world, int256 order, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of image_url (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemImage_url(
    IStore _store,
    bytes32 world,
    int256 order,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to image_url */
  function pushImage_url(bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to image_url (using the specified store) */
  function pushImage_url(IStore _store, bytes32 world, int256 order, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from image_url */
  function popImage_url(bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from image_url (using the specified store) */
  function popImage_url(IStore _store, bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of image_url at `_index` */
  function updateImage_url(bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of image_url (using the specified store) at `_index` */
  function updateImage_url(IStore _store, bytes32 world, int256 order, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(bytes32 world, int256 order) internal view returns (StoryArtData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 world, int256 order) internal view returns (StoryArtData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 world,
    int256 order,
    string memory context,
    string memory nft_url,
    string memory image_url
  ) internal {
    bytes memory _data = encode(context, nft_url, image_url);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 world,
    int256 order,
    string memory context,
    string memory nft_url,
    string memory image_url
  ) internal {
    bytes memory _data = encode(context, nft_url, image_url);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 world, int256 order, StoryArtData memory _table) internal {
    set(world, order, _table.context, _table.nft_url, _table.image_url);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 world, int256 order, StoryArtData memory _table) internal {
    set(_store, world, order, _table.context, _table.nft_url, _table.image_url);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (StoryArtData memory _table) {
    // 0 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 0));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 0) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 32;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.context = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.nft_url = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.image_url = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    string memory context,
    string memory nft_url,
    string memory image_url
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(bytes(context).length);
    _counters[1] = uint40(bytes(nft_url).length);
    _counters[2] = uint40(bytes(image_url).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return abi.encodePacked(_encodedLengths.unwrap(), bytes((context)), bytes((nft_url)), bytes((image_url)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 world, int256 order) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 world, int256 order) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = world;
    _keyTuple[1] = bytes32(uint256(int256(order)));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
