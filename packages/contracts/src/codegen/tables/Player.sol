// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { Class } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Player")));
bytes32 constant PlayerTableId = _tableId;

struct PlayerData {
  Class class;
  string name;
  string player_description;
  string picture_url;
}

library Player {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.STRING;
    _schema[2] = SchemaType.STRING;
    _schema[3] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](2);
    _schema[0] = SchemaType.ADDRESS;
    _schema[1] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "class";
    _fieldNames[1] = "name";
    _fieldNames[2] = "player_description";
    _fieldNames[3] = "picture_url";
    return ("Player", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get class */
  function getClass(address owner, bytes32 world) internal view returns (Class class) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return Class(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get class (using the specified store) */
  function getClass(IStore _store, address owner, bytes32 world) internal view returns (Class class) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return Class(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set class */
  function setClass(address owner, bytes32 world, Class class) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(class)));
  }

  /** Set class (using the specified store) */
  function setClass(IStore _store, address owner, bytes32 world, Class class) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(class)));
  }

  /** Get name */
  function getName(address owner, bytes32 world) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Get name (using the specified store) */
  function getName(IStore _store, address owner, bytes32 world) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (string(_blob));
  }

  /** Set name */
  function setName(address owner, bytes32 world, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.setField(_tableId, _keyTuple, 1, bytes((name)));
  }

  /** Set name (using the specified store) */
  function setName(IStore _store, address owner, bytes32 world, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.setField(_tableId, _keyTuple, 1, bytes((name)));
  }

  /** Get the length of name */
  function lengthName(address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of name (using the specified store) */
  function lengthName(IStore _store, address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 1, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of name (unchecked, returns invalid data if index overflows) */
  function getItemName(address owner, bytes32 world, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of name (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemName(
    IStore _store,
    address owner,
    bytes32 world,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 1, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to name */
  function pushName(address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Push a slice to name (using the specified store) */
  function pushName(IStore _store, address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.pushToField(_tableId, _keyTuple, 1, bytes((_slice)));
  }

  /** Pop a slice from name */
  function popName(address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Pop a slice from name (using the specified store) */
  function popName(IStore _store, address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.popFromField(_tableId, _keyTuple, 1, 1);
  }

  /** Update a slice of name at `_index` */
  function updateName(address owner, bytes32 world, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Update a slice of name (using the specified store) at `_index` */
  function updateName(IStore _store, address owner, bytes32 world, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.updateInField(_tableId, _keyTuple, 1, _index * 1, bytes((_slice)));
  }

  /** Get player_description */
  function getPlayer_description(
    address owner,
    bytes32 world
  ) internal view returns (string memory player_description) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Get player_description (using the specified store) */
  function getPlayer_description(
    IStore _store,
    address owner,
    bytes32 world
  ) internal view returns (string memory player_description) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (string(_blob));
  }

  /** Set player_description */
  function setPlayer_description(address owner, bytes32 world, string memory player_description) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((player_description)));
  }

  /** Set player_description (using the specified store) */
  function setPlayer_description(
    IStore _store,
    address owner,
    bytes32 world,
    string memory player_description
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.setField(_tableId, _keyTuple, 2, bytes((player_description)));
  }

  /** Get the length of player_description */
  function lengthPlayer_description(address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of player_description (using the specified store) */
  function lengthPlayer_description(IStore _store, address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of player_description (unchecked, returns invalid data if index overflows) */
  function getItemPlayer_description(
    address owner,
    bytes32 world,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of player_description (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemPlayer_description(
    IStore _store,
    address owner,
    bytes32 world,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to player_description */
  function pushPlayer_description(address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Push a slice to player_description (using the specified store) */
  function pushPlayer_description(IStore _store, address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)));
  }

  /** Pop a slice from player_description */
  function popPlayer_description(address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Pop a slice from player_description (using the specified store) */
  function popPlayer_description(IStore _store, address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.popFromField(_tableId, _keyTuple, 2, 1);
  }

  /** Update a slice of player_description at `_index` */
  function updatePlayer_description(address owner, bytes32 world, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Update a slice of player_description (using the specified store) at `_index` */
  function updatePlayer_description(
    IStore _store,
    address owner,
    bytes32 world,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)));
  }

  /** Get picture_url */
  function getPicture_url(address owner, bytes32 world) internal view returns (string memory picture_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Get picture_url (using the specified store) */
  function getPicture_url(
    IStore _store,
    address owner,
    bytes32 world
  ) internal view returns (string memory picture_url) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (string(_blob));
  }

  /** Set picture_url */
  function setPicture_url(address owner, bytes32 world, string memory picture_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.setField(_tableId, _keyTuple, 3, bytes((picture_url)));
  }

  /** Set picture_url (using the specified store) */
  function setPicture_url(IStore _store, address owner, bytes32 world, string memory picture_url) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.setField(_tableId, _keyTuple, 3, bytes((picture_url)));
  }

  /** Get the length of picture_url */
  function lengthPicture_url(address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get the length of picture_url (using the specified store) */
  function lengthPicture_url(IStore _store, address owner, bytes32 world) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getSchema());
    return _byteLength / 1;
  }

  /** Get an item of picture_url (unchecked, returns invalid data if index overflows) */
  function getItemPicture_url(address owner, bytes32 world, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Get an item of picture_url (using the specified store) (unchecked, returns invalid data if index overflows) */
  function getItemPicture_url(
    IStore _store,
    address owner,
    bytes32 world,
    uint256 _index
  ) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 3, getSchema(), _index * 1, (_index + 1) * 1);
    return (string(_blob));
  }

  /** Push a slice to picture_url */
  function pushPicture_url(address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Push a slice to picture_url (using the specified store) */
  function pushPicture_url(IStore _store, address owner, bytes32 world, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.pushToField(_tableId, _keyTuple, 3, bytes((_slice)));
  }

  /** Pop a slice from picture_url */
  function popPicture_url(address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Pop a slice from picture_url (using the specified store) */
  function popPicture_url(IStore _store, address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.popFromField(_tableId, _keyTuple, 3, 1);
  }

  /** Update a slice of picture_url at `_index` */
  function updatePicture_url(address owner, bytes32 world, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Update a slice of picture_url (using the specified store) at `_index` */
  function updatePicture_url(
    IStore _store,
    address owner,
    bytes32 world,
    uint256 _index,
    string memory _slice
  ) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.updateInField(_tableId, _keyTuple, 3, _index * 1, bytes((_slice)));
  }

  /** Get the full data */
  function get(address owner, bytes32 world) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, address owner, bytes32 world) internal view returns (PlayerData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    address owner,
    bytes32 world,
    Class class,
    string memory name,
    string memory player_description,
    string memory picture_url
  ) internal {
    bytes memory _data = encode(class, name, player_description, picture_url);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    address owner,
    bytes32 world,
    Class class,
    string memory name,
    string memory player_description,
    string memory picture_url
  ) internal {
    bytes memory _data = encode(class, name, player_description, picture_url);

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(address owner, bytes32 world, PlayerData memory _table) internal {
    set(owner, world, _table.class, _table.name, _table.player_description, _table.picture_url);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, address owner, bytes32 world, PlayerData memory _table) internal {
    set(_store, owner, world, _table.class, _table.name, _table.player_description, _table.picture_url);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal view returns (PlayerData memory _table) {
    // 1 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 1));

    _table.class = Class(uint8(Bytes.slice1(_blob, 0)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 1) {
      uint256 _start;
      // skip static data length + dynamic lengths word
      uint256 _end = 33;

      _start = _end;
      _end += _encodedLengths.atIndex(0);
      _table.name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(1);
      _table.player_description = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));

      _start = _end;
      _end += _encodedLengths.atIndex(2);
      _table.picture_url = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    Class class,
    string memory name,
    string memory player_description,
    string memory picture_url
  ) internal view returns (bytes memory) {
    uint40[] memory _counters = new uint40[](3);
    _counters[0] = uint40(bytes(name).length);
    _counters[1] = uint40(bytes(player_description).length);
    _counters[2] = uint40(bytes(picture_url).length);
    PackedCounter _encodedLengths = PackedCounterLib.pack(_counters);

    return
      abi.encodePacked(
        class,
        _encodedLengths.unwrap(),
        bytes((name)),
        bytes((player_description)),
        bytes((picture_url))
      );
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(address owner, bytes32 world) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;
  }

  /* Delete all data for given keys */
  function deleteRecord(address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, address owner, bytes32 world) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(uint160(owner)));
    _keyTuple[1] = world;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
